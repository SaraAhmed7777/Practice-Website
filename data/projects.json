/* filename: volunteer-projects.html */
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Find a Volunteer Project | CUNYServe</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>

<body class="font-sans text-gray-800 bg-gray-100">
  <!-- navbar comes from navbar.js -->
  <div id="navbar-placeholder"></div>

  <!-- hero -->
  <section class="bg-[#0056b3] text-white text-center py-10 px-4">
    <h1 class="text-3xl font-bold mb-2">Find a Volunteer Project</h1>
    <p class="text-lg">Long-term or recurring opportunities—CUNY & non-CUNY.</p>
  </section>

  <!-- filters (search + dropdowns) -->
  <section class="bg-white py-6">
    <div class="max-w-6xl mx-auto px-4 flex flex-wrap gap-4 items-center justify-between">
      <input id="searchInput" type="text" placeholder="Search titles or tags…" class="w-full md:w-1/3 px-4 py-2 border rounded" />

      <select id="campusFilter" class="w-full md:w-1/4 px-4 py-2 border rounded">
        <option value="All">All Campuses</option>
        <option value="Multi-CUNY">Multi-CUNY</option>
        <option value="Baruch College">Baruch College</option>
        <option value="Brooklyn College">Brooklyn College</option>
        <option value="City Tech">City Tech</option>
        <option value="CCNY">CCNY</option>
        <option value="Hunter College">Hunter College</option>
        <option value="York College">York College</option>
        <option value="BMCC">BMCC</option>
        <option value="CSI">CSI</option>
        <option value="Medgar Evers College">Medgar Evers College</option>
        <option value="Non-CUNY">Non-CUNY</option>
      </select>

      <select id="typeFilter" class="w-full md:w-1/4 px-4 py-2 border rounded">
        <option value="All">All Types</option>
        <option value="Mentoring">Mentoring</option>
        <option value="Campus Volunteering">Campus Volunteering</option>
        <option value="Community Support">Community Support</option>
        <option value="Education">Education</option>
        <option value="Animal Welfare">Animal Welfare</option>
        <option value="Skills-Based">Skills-Based</option>
        <option value="Civic Action">Civic Action</option>
        <option value="Civic Engagement">Civic Engagement</option> <!-- added so our data shows -->
        <option value="Health Support">Health Support</option>
        <option value="Disaster Response">Disaster Response</option>
        <option value="International Volunteering">International Volunteering</option>
        <option value="Digital Volunteering">Digital Volunteering</option>
        <option value="Translation">Translation</option>
        <option value="Service Program">Service Program</option>
        <option value="Logistics">Logistics</option> <!-- added so our data shows -->
      </select>

      <select id="formatFilter" class="w-full md:w-1/4 px-4 py-2 border rounded">
        <option value="All">All Formats</option>
        <option value="In-Person">In-Person</option>
        <option value="Remote">Remote</option>
        <option value="Hybrid">Hybrid</option>
      </select>
    </div>
    <p id="projectCount" class="max-w-6xl mx-auto px-4 mt-2 text-sm text-gray-600"></p>
  </section>

  <!-- grid -->
  <section class="bg-gray-50 py-10">
    <div id="projectGrid" class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 px-4"></div>
  </section>

  <!-- footer -->
  <footer class="bg-gray-900 text-gray-300 py-8">
    <div class="max-w-6xl mx-auto flex flex-col md:flex-row justify-between items-center text-sm px-4">
      <p>&copy; 2025 CUNYServe. All rights reserved.</p>
      <div class="space-x-4 mt-4 md:mt-0">
        <a href="#" class="hover:text-white">Privacy</a>
        <a href="#" class="hover:text-white">Terms</a>
        <a href="#" class="hover:text-white">Contact</a>
      </div>
    </div>
  </footer>

  <!-- script -->
  <script>
/**
 * quick notes for us / sabbir:
 * - frontend only: we load data/projects.json and render the cards.
 * - clicking "Apply" marks it in localStorage so we can show "Applied".
 * - later, if we add a backend, just replace saveApply() with a real API call.
 */

let projects = [];
const projectGrid = document.getElementById("projectGrid");
const countEl = document.getElementById("projectCount");

// store "applied" state locally so the button updates next time user visits
const APPLIED_KEY = "cunyserve_projects_applied";
function hasApplied(id) {
  const list = JSON.parse(localStorage.getItem(APPLIED_KEY) || "[]");
  return list.includes(id);
}
function saveApply(id) {
  const list = JSON.parse(localStorage.getItem(APPLIED_KEY) || "[]");
  if (!list.includes(id)) list.push(id);
  localStorage.setItem(APPLIED_KEY, JSON.stringify(list));
}

// load JSON (note: relative path, cache-busting query to avoid stale data on GH Pages)
async function loadProjects() {
  try {
    const res = await fetch('data/projects.json?cb=' + Date.now(), { cache: 'no-store' });
    if (!res.ok) throw new Error('HTTP ' + res.status + ' loading data/projects.json');
    projects = await res.json();
    renderProjects();
  } catch (err) {
    console.error(err);
    projectGrid.innerHTML = `
      <div class="bg-red-50 text-red-700 p-4 rounded">
        Could not load <code>data/projects.json</code>.
        Open <a class="underline" href="data/projects.json" target="_blank">data/projects.json</a> to verify.
      </div>`;
  }
}

// small visual tag
function badge(text) {
  return \`<span class="text-xs px-2 py-1 rounded-full bg-gray-100 border">\${text}</span>\`;
}

// build the grid based on filters + search
function renderProjects() {
  const term   = (document.getElementById("searchInput")?.value || "").toLowerCase().trim();
  const format = document.getElementById("formatFilter")?.value || "All";
  const campus = document.getElementById("campusFilter")?.value || "All";
  const type   = document.getElementById("typeFilter")?.value || "All";

  const filtered = projects.filter(p =>
    (format === "All"  || p.format === format) &&
    (campus === "All"  || p.campus === campus) &&
    (type   === "All"  || p.type   === type) &&
    (!term || p.title.toLowerCase().includes(term) || (p.tags || []).join(" ").toLowerCase().includes(term))
  );

  // show how many matched
  if (countEl) {
    countEl.textContent = \`Showing \${filtered.length} project\${filtered.length !== 1 ? 's' : ''}\`;
  }

  if (filtered.length === 0) {
    projectGrid.innerHTML = "<div class='text-center text-gray-500 italic'>No projects match your filters.</div>";
    return;
  }

  projectGrid.innerHTML = filtered.map(p => {
    const id = p.id || p.title; // fallback: use title if id missing
    const tags = (p.tags || []).slice(0, 5).map(t => badge(t)).join(" ");
    const applied = hasApplied(id);
    const applyUrl = p.applyUrl || p.signupUrl || ""; // support either field

    // button label + styles
    const hasUrl = !!applyUrl;
    const btnLabel = applied ? "Applied" : (hasUrl ? "Apply / Learn more" : "No link yet");
    const btnClasses = applied
      ? "bg-gray-200 text-gray-500 cursor-default"
      : (hasUrl ? "bg-[#0056b3] text-white hover:bg-[#0a4b95]" : "bg-gray-200 text-gray-500 cursor-not-allowed");

    const btn = hasUrl
      ? \`<a href="\${applyUrl}"
            data-project-id="\${id}"
            target="_blank" rel="noopener"
            class="mt-4 inline-flex items-center justify-center px-3 py-2 rounded-xl text-sm font-medium \${btnClasses}">
            \${btnLabel}
         </a>\`
      : \`<button type="button"
            class="mt-4 inline-flex items-center justify-center px-3 py-2 rounded-xl text-sm font-medium \${btnClasses}"
            disabled>\${btnLabel}</button>\`;

    return \`
      <div class="bg-white rounded-2xl p-5 shadow w-full max-w-sm">
        <div class="text-sm text-gray-500">\${p.org || ""}</div>
        <h3 class="text-xl font-semibold text-[#0056b3] mt-1">\${p.title}</h3>

        <div class="mt-2 flex flex-wrap gap-2">
          \${badge(p.campus || "—")}
          \${badge(p.format || "—")}
          \${p.type ? badge(p.type) : ""}
          \${p.location ? badge(p.location) : ""} <!-- show location if provided -->
        </div>

        <p class="text-gray-600 mt-3">\${p.description || p.desc || ""}</p>
        <div class="mt-3 flex flex-wrap gap-2">\${tags}</div>

        \${btn}
      </div>\`;
  }).join("");

  // when user clicks apply: mark as applied, then let the link open
  projectGrid.querySelectorAll('a[data-project-id]').forEach(a => {
    a.addEventListener('click', (ev) => {
      const id = ev.currentTarget.getAttribute('data-project-id');
      if (!hasApplied(id)) {
        saveApply(id);
        // update button to look applied without re-render
        ev.currentTarget.textContent = "Applied";
        ev.currentTarget.classList.remove("bg-[#0056b3]", "hover:bg-[#0a4b95]", "text-white");
        ev.currentTarget.classList.add("bg-gray-200", "text-gray-500", "cursor-default");
      }
      // link still opens in new tab
    });
  });
}

// re-render on user interactions
document.getElementById("formatFilter")?.addEventListener("change", renderProjects);
document.getElementById("campusFilter")?.addEventListener("change", renderProjects);
document.getElementById("typeFilter")?.addEventListener("change", renderProjects);
document.getElementById("searchInput")?.addEventListener("input", renderProjects);

// boot
loadProjects();
</script>

  <script src="navbar.js"></script>
</body>
</html>
